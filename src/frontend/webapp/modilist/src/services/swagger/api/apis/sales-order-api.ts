/* tslint:disable */
/* eslint-disable */
/**
 * ModilistAPI
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { ActiveSalesOrderDTO } from '../models';
import { AddOrUpdateFeedback } from '../models';
import { AddOrUpdateFeedbackDTO } from '../models';
import { AddSalesOrderLineItem } from '../models';
import { AddSalesOrderLineItemDTO } from '../models';
import { CreateSalesOrder } from '../models';
import { SalesOrderDTO } from '../models';
import { SalesOrderDetailsDTO } from '../models';
import { SalesOrderDetailsDTODQBResultDTO } from '../models';
import { ShipSalesOrder } from '../models';
import { ShipSalesOrderDTO } from '../models';
import { UpdateAdditionalRequests } from '../models';
import { UpdateEstimatedDeliveryDate } from '../models';
import { UpdateSalesOrderAddress } from '../models';
/**
 * SalesOrderApi - axios parameter creator
 * @export
 */
export const SalesOrderApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [apiVersion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SalesOrderActiveGet: async (apiVersion?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/SalesOrder.Active`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Bearer", ["https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/Accounts", "https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/StylePreferences", "https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/Addresses", "https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/PaymentMethods", "https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/Subscriptions", "https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/Products", "https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/SalesOrders", "https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/Returns", "https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/Development"])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (apiVersion !== undefined) {
                localVarQueryParameter['api-version'] = apiVersion;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [apiVersion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SalesOrderCreateFirstOrderPost: async (apiVersion?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/SalesOrder.CreateFirstOrder`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Bearer", ["https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/Accounts", "https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/StylePreferences", "https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/Addresses", "https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/PaymentMethods", "https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/Subscriptions", "https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/Products", "https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/SalesOrders", "https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/Returns", "https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/Development"])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (apiVersion !== undefined) {
                localVarQueryParameter['api-version'] = apiVersion;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateSalesOrder} [body] 
         * @param {string} [apiVersion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SalesOrderCreatePost: async (body?: CreateSalesOrder, apiVersion?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/SalesOrder.Create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Bearer", ["https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/Accounts", "https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/StylePreferences", "https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/Addresses", "https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/PaymentMethods", "https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/Subscriptions", "https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/Products", "https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/SalesOrders", "https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/Returns", "https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/Development"])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (apiVersion !== undefined) {
                localVarQueryParameter['api-version'] = apiVersion;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || (localVarRequestOptions.headers && localVarRequestOptions.headers['Content-Type'] === 'application/json');
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [dqb] DynamicQuery
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SalesOrderQueryGet: async (dqb?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/SalesOrder.Query`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Bearer", ["https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/Accounts", "https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/StylePreferences", "https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/Addresses", "https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/PaymentMethods", "https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/Subscriptions", "https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/Products", "https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/SalesOrders", "https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/Returns", "https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/Development"])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (dqb !== undefined) {
                localVarQueryParameter['dqb'] = dqb;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} salesOrderId 
         * @param {AddSalesOrderLineItem} [body] 
         * @param {string} [apiVersion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SalesOrderSalesOrderIdAddLineItemPost: async (salesOrderId: number, body?: AddSalesOrderLineItem, apiVersion?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'salesOrderId' is not null or undefined
            if (salesOrderId === null || salesOrderId === undefined) {
                throw new RequiredError('salesOrderId','Required parameter salesOrderId was null or undefined when calling apiV1SalesOrderSalesOrderIdAddLineItemPost.');
            }
            const localVarPath = `/api/v1/SalesOrder.{salesOrderId}/AddLineItem`
                .replace(`{${"salesOrderId"}}`, encodeURIComponent(String(salesOrderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Bearer", ["https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/Accounts", "https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/StylePreferences", "https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/Addresses", "https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/PaymentMethods", "https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/Subscriptions", "https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/Products", "https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/SalesOrders", "https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/Returns", "https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/Development"])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (apiVersion !== undefined) {
                localVarQueryParameter['api-version'] = apiVersion;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || (localVarRequestOptions.headers && localVarRequestOptions.headers['Content-Type'] === 'application/json');
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} salesOrderId 
         * @param {string} [apiVersion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SalesOrderSalesOrderIdBuyAllPost: async (salesOrderId: number, apiVersion?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'salesOrderId' is not null or undefined
            if (salesOrderId === null || salesOrderId === undefined) {
                throw new RequiredError('salesOrderId','Required parameter salesOrderId was null or undefined when calling apiV1SalesOrderSalesOrderIdBuyAllPost.');
            }
            const localVarPath = `/api/v1/SalesOrder.{salesOrderId}/BuyAll`
                .replace(`{${"salesOrderId"}}`, encodeURIComponent(String(salesOrderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Bearer", ["https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/Accounts", "https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/StylePreferences", "https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/Addresses", "https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/PaymentMethods", "https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/Subscriptions", "https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/Products", "https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/SalesOrders", "https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/Returns", "https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/Development"])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (apiVersion !== undefined) {
                localVarQueryParameter['api-version'] = apiVersion;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} salesOrderId 
         * @param {number} salesOrderLineItemId 
         * @param {AddOrUpdateFeedback} [body] 
         * @param {string} [apiVersion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SalesOrderSalesOrderIdFeedbackSalesOrderLineItemIdPost: async (salesOrderId: number, salesOrderLineItemId: number, body?: AddOrUpdateFeedback, apiVersion?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'salesOrderId' is not null or undefined
            if (salesOrderId === null || salesOrderId === undefined) {
                throw new RequiredError('salesOrderId','Required parameter salesOrderId was null or undefined when calling apiV1SalesOrderSalesOrderIdFeedbackSalesOrderLineItemIdPost.');
            }
            // verify required parameter 'salesOrderLineItemId' is not null or undefined
            if (salesOrderLineItemId === null || salesOrderLineItemId === undefined) {
                throw new RequiredError('salesOrderLineItemId','Required parameter salesOrderLineItemId was null or undefined when calling apiV1SalesOrderSalesOrderIdFeedbackSalesOrderLineItemIdPost.');
            }
            const localVarPath = `/api/v1/SalesOrder.{salesOrderId}/Feedback/{salesOrderLineItemId}`
                .replace(`{${"salesOrderId"}}`, encodeURIComponent(String(salesOrderId)))
                .replace(`{${"salesOrderLineItemId"}}`, encodeURIComponent(String(salesOrderLineItemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Bearer", ["https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/Accounts", "https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/StylePreferences", "https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/Addresses", "https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/PaymentMethods", "https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/Subscriptions", "https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/Products", "https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/SalesOrders", "https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/Returns", "https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/Development"])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (apiVersion !== undefined) {
                localVarQueryParameter['api-version'] = apiVersion;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || (localVarRequestOptions.headers && localVarRequestOptions.headers['Content-Type'] === 'application/json');
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} salesOrderId 
         * @param {string} [apiVersion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SalesOrderSalesOrderIdGet: async (salesOrderId: number, apiVersion?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'salesOrderId' is not null or undefined
            if (salesOrderId === null || salesOrderId === undefined) {
                throw new RequiredError('salesOrderId','Required parameter salesOrderId was null or undefined when calling apiV1SalesOrderSalesOrderIdGet.');
            }
            const localVarPath = `/api/v1/SalesOrder.{salesOrderId}`
                .replace(`{${"salesOrderId"}}`, encodeURIComponent(String(salesOrderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Bearer", ["https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/Accounts", "https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/StylePreferences", "https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/Addresses", "https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/PaymentMethods", "https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/Subscriptions", "https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/Products", "https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/SalesOrders", "https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/Returns", "https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/Development"])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (apiVersion !== undefined) {
                localVarQueryParameter['api-version'] = apiVersion;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} salesOrderId 
         * @param {ShipSalesOrder} [body] 
         * @param {string} [apiVersion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SalesOrderSalesOrderIdShipPost: async (salesOrderId: number, body?: ShipSalesOrder, apiVersion?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'salesOrderId' is not null or undefined
            if (salesOrderId === null || salesOrderId === undefined) {
                throw new RequiredError('salesOrderId','Required parameter salesOrderId was null or undefined when calling apiV1SalesOrderSalesOrderIdShipPost.');
            }
            const localVarPath = `/api/v1/SalesOrder.{salesOrderId}/Ship`
                .replace(`{${"salesOrderId"}}`, encodeURIComponent(String(salesOrderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Bearer", ["https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/Accounts", "https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/StylePreferences", "https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/Addresses", "https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/PaymentMethods", "https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/Subscriptions", "https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/Products", "https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/SalesOrders", "https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/Returns", "https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/Development"])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (apiVersion !== undefined) {
                localVarQueryParameter['api-version'] = apiVersion;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || (localVarRequestOptions.headers && localVarRequestOptions.headers['Content-Type'] === 'application/json');
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} salesOrderId 
         * @param {UpdateAdditionalRequests} [body] 
         * @param {string} [apiVersion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SalesOrderSalesOrderIdUpdateAdditionalRequestsPost: async (salesOrderId: number, body?: UpdateAdditionalRequests, apiVersion?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'salesOrderId' is not null or undefined
            if (salesOrderId === null || salesOrderId === undefined) {
                throw new RequiredError('salesOrderId','Required parameter salesOrderId was null or undefined when calling apiV1SalesOrderSalesOrderIdUpdateAdditionalRequestsPost.');
            }
            const localVarPath = `/api/v1/SalesOrder.{salesOrderId}/UpdateAdditionalRequests`
                .replace(`{${"salesOrderId"}}`, encodeURIComponent(String(salesOrderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Bearer", ["https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/Accounts", "https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/StylePreferences", "https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/Addresses", "https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/PaymentMethods", "https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/Subscriptions", "https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/Products", "https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/SalesOrders", "https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/Returns", "https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/Development"])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (apiVersion !== undefined) {
                localVarQueryParameter['api-version'] = apiVersion;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || (localVarRequestOptions.headers && localVarRequestOptions.headers['Content-Type'] === 'application/json');
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} salesOrderId 
         * @param {UpdateSalesOrderAddress} [body] 
         * @param {string} [apiVersion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SalesOrderSalesOrderIdUpdateAddressPost: async (salesOrderId: number, body?: UpdateSalesOrderAddress, apiVersion?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'salesOrderId' is not null or undefined
            if (salesOrderId === null || salesOrderId === undefined) {
                throw new RequiredError('salesOrderId','Required parameter salesOrderId was null or undefined when calling apiV1SalesOrderSalesOrderIdUpdateAddressPost.');
            }
            const localVarPath = `/api/v1/SalesOrder.{salesOrderId}/UpdateAddress`
                .replace(`{${"salesOrderId"}}`, encodeURIComponent(String(salesOrderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Bearer", ["https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/Accounts", "https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/StylePreferences", "https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/Addresses", "https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/PaymentMethods", "https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/Subscriptions", "https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/Products", "https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/SalesOrders", "https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/Returns", "https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/Development"])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (apiVersion !== undefined) {
                localVarQueryParameter['api-version'] = apiVersion;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || (localVarRequestOptions.headers && localVarRequestOptions.headers['Content-Type'] === 'application/json');
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} salesOrderId 
         * @param {UpdateEstimatedDeliveryDate} [body] 
         * @param {string} [apiVersion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SalesOrderSalesOrderIdUpdateEstimatedDeliveryDatePost: async (salesOrderId: number, body?: UpdateEstimatedDeliveryDate, apiVersion?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'salesOrderId' is not null or undefined
            if (salesOrderId === null || salesOrderId === undefined) {
                throw new RequiredError('salesOrderId','Required parameter salesOrderId was null or undefined when calling apiV1SalesOrderSalesOrderIdUpdateEstimatedDeliveryDatePost.');
            }
            const localVarPath = `/api/v1/SalesOrder.{salesOrderId}/UpdateEstimatedDeliveryDate`
                .replace(`{${"salesOrderId"}}`, encodeURIComponent(String(salesOrderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Bearer", ["https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/Accounts", "https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/StylePreferences", "https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/Addresses", "https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/PaymentMethods", "https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/Subscriptions", "https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/Products", "https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/SalesOrders", "https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/Returns", "https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/Development"])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (apiVersion !== undefined) {
                localVarQueryParameter['api-version'] = apiVersion;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || (localVarRequestOptions.headers && localVarRequestOptions.headers['Content-Type'] === 'application/json');
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SalesOrderApi - functional programming interface
 * @export
 */
export const SalesOrderApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [apiVersion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesOrderActiveGet(apiVersion?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ActiveSalesOrderDTO>>> {
            const localVarAxiosArgs = await SalesOrderApiAxiosParamCreator(configuration).apiV1SalesOrderActiveGet(apiVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [apiVersion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesOrderCreateFirstOrderPost(apiVersion?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SalesOrderDTO>>> {
            const localVarAxiosArgs = await SalesOrderApiAxiosParamCreator(configuration).apiV1SalesOrderCreateFirstOrderPost(apiVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {CreateSalesOrder} [body] 
         * @param {string} [apiVersion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesOrderCreatePost(body?: CreateSalesOrder, apiVersion?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SalesOrderDTO>>> {
            const localVarAxiosArgs = await SalesOrderApiAxiosParamCreator(configuration).apiV1SalesOrderCreatePost(body, apiVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [dqb] DynamicQuery
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesOrderQueryGet(dqb?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SalesOrderDetailsDTODQBResultDTO>>> {
            const localVarAxiosArgs = await SalesOrderApiAxiosParamCreator(configuration).apiV1SalesOrderQueryGet(dqb, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} salesOrderId 
         * @param {AddSalesOrderLineItem} [body] 
         * @param {string} [apiVersion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesOrderSalesOrderIdAddLineItemPost(salesOrderId: number, body?: AddSalesOrderLineItem, apiVersion?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AddSalesOrderLineItemDTO>>> {
            const localVarAxiosArgs = await SalesOrderApiAxiosParamCreator(configuration).apiV1SalesOrderSalesOrderIdAddLineItemPost(salesOrderId, body, apiVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} salesOrderId 
         * @param {string} [apiVersion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesOrderSalesOrderIdBuyAllPost(salesOrderId: number, apiVersion?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AddOrUpdateFeedbackDTO>>> {
            const localVarAxiosArgs = await SalesOrderApiAxiosParamCreator(configuration).apiV1SalesOrderSalesOrderIdBuyAllPost(salesOrderId, apiVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} salesOrderId 
         * @param {number} salesOrderLineItemId 
         * @param {AddOrUpdateFeedback} [body] 
         * @param {string} [apiVersion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesOrderSalesOrderIdFeedbackSalesOrderLineItemIdPost(salesOrderId: number, salesOrderLineItemId: number, body?: AddOrUpdateFeedback, apiVersion?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AddOrUpdateFeedbackDTO>>> {
            const localVarAxiosArgs = await SalesOrderApiAxiosParamCreator(configuration).apiV1SalesOrderSalesOrderIdFeedbackSalesOrderLineItemIdPost(salesOrderId, salesOrderLineItemId, body, apiVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} salesOrderId 
         * @param {string} [apiVersion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesOrderSalesOrderIdGet(salesOrderId: number, apiVersion?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SalesOrderDetailsDTO>>> {
            const localVarAxiosArgs = await SalesOrderApiAxiosParamCreator(configuration).apiV1SalesOrderSalesOrderIdGet(salesOrderId, apiVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} salesOrderId 
         * @param {ShipSalesOrder} [body] 
         * @param {string} [apiVersion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesOrderSalesOrderIdShipPost(salesOrderId: number, body?: ShipSalesOrder, apiVersion?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ShipSalesOrderDTO>>> {
            const localVarAxiosArgs = await SalesOrderApiAxiosParamCreator(configuration).apiV1SalesOrderSalesOrderIdShipPost(salesOrderId, body, apiVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} salesOrderId 
         * @param {UpdateAdditionalRequests} [body] 
         * @param {string} [apiVersion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesOrderSalesOrderIdUpdateAdditionalRequestsPost(salesOrderId: number, body?: UpdateAdditionalRequests, apiVersion?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await SalesOrderApiAxiosParamCreator(configuration).apiV1SalesOrderSalesOrderIdUpdateAdditionalRequestsPost(salesOrderId, body, apiVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} salesOrderId 
         * @param {UpdateSalesOrderAddress} [body] 
         * @param {string} [apiVersion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesOrderSalesOrderIdUpdateAddressPost(salesOrderId: number, body?: UpdateSalesOrderAddress, apiVersion?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await SalesOrderApiAxiosParamCreator(configuration).apiV1SalesOrderSalesOrderIdUpdateAddressPost(salesOrderId, body, apiVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} salesOrderId 
         * @param {UpdateEstimatedDeliveryDate} [body] 
         * @param {string} [apiVersion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesOrderSalesOrderIdUpdateEstimatedDeliveryDatePost(salesOrderId: number, body?: UpdateEstimatedDeliveryDate, apiVersion?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await SalesOrderApiAxiosParamCreator(configuration).apiV1SalesOrderSalesOrderIdUpdateEstimatedDeliveryDatePost(salesOrderId, body, apiVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * SalesOrderApi - factory interface
 * @export
 */
export const SalesOrderApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {string} [apiVersion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesOrderActiveGet(apiVersion?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<ActiveSalesOrderDTO>> {
            return SalesOrderApiFp(configuration).apiV1SalesOrderActiveGet(apiVersion, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [apiVersion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesOrderCreateFirstOrderPost(apiVersion?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<SalesOrderDTO>> {
            return SalesOrderApiFp(configuration).apiV1SalesOrderCreateFirstOrderPost(apiVersion, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateSalesOrder} [body] 
         * @param {string} [apiVersion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesOrderCreatePost(body?: CreateSalesOrder, apiVersion?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<SalesOrderDTO>> {
            return SalesOrderApiFp(configuration).apiV1SalesOrderCreatePost(body, apiVersion, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [dqb] DynamicQuery
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesOrderQueryGet(dqb?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<SalesOrderDetailsDTODQBResultDTO>> {
            return SalesOrderApiFp(configuration).apiV1SalesOrderQueryGet(dqb, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} salesOrderId 
         * @param {AddSalesOrderLineItem} [body] 
         * @param {string} [apiVersion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesOrderSalesOrderIdAddLineItemPost(salesOrderId: number, body?: AddSalesOrderLineItem, apiVersion?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<AddSalesOrderLineItemDTO>> {
            return SalesOrderApiFp(configuration).apiV1SalesOrderSalesOrderIdAddLineItemPost(salesOrderId, body, apiVersion, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} salesOrderId 
         * @param {string} [apiVersion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesOrderSalesOrderIdBuyAllPost(salesOrderId: number, apiVersion?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<AddOrUpdateFeedbackDTO>> {
            return SalesOrderApiFp(configuration).apiV1SalesOrderSalesOrderIdBuyAllPost(salesOrderId, apiVersion, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} salesOrderId 
         * @param {number} salesOrderLineItemId 
         * @param {AddOrUpdateFeedback} [body] 
         * @param {string} [apiVersion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesOrderSalesOrderIdFeedbackSalesOrderLineItemIdPost(salesOrderId: number, salesOrderLineItemId: number, body?: AddOrUpdateFeedback, apiVersion?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<AddOrUpdateFeedbackDTO>> {
            return SalesOrderApiFp(configuration).apiV1SalesOrderSalesOrderIdFeedbackSalesOrderLineItemIdPost(salesOrderId, salesOrderLineItemId, body, apiVersion, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} salesOrderId 
         * @param {string} [apiVersion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesOrderSalesOrderIdGet(salesOrderId: number, apiVersion?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<SalesOrderDetailsDTO>> {
            return SalesOrderApiFp(configuration).apiV1SalesOrderSalesOrderIdGet(salesOrderId, apiVersion, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} salesOrderId 
         * @param {ShipSalesOrder} [body] 
         * @param {string} [apiVersion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesOrderSalesOrderIdShipPost(salesOrderId: number, body?: ShipSalesOrder, apiVersion?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<ShipSalesOrderDTO>> {
            return SalesOrderApiFp(configuration).apiV1SalesOrderSalesOrderIdShipPost(salesOrderId, body, apiVersion, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} salesOrderId 
         * @param {UpdateAdditionalRequests} [body] 
         * @param {string} [apiVersion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesOrderSalesOrderIdUpdateAdditionalRequestsPost(salesOrderId: number, body?: UpdateAdditionalRequests, apiVersion?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return SalesOrderApiFp(configuration).apiV1SalesOrderSalesOrderIdUpdateAdditionalRequestsPost(salesOrderId, body, apiVersion, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} salesOrderId 
         * @param {UpdateSalesOrderAddress} [body] 
         * @param {string} [apiVersion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesOrderSalesOrderIdUpdateAddressPost(salesOrderId: number, body?: UpdateSalesOrderAddress, apiVersion?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return SalesOrderApiFp(configuration).apiV1SalesOrderSalesOrderIdUpdateAddressPost(salesOrderId, body, apiVersion, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} salesOrderId 
         * @param {UpdateEstimatedDeliveryDate} [body] 
         * @param {string} [apiVersion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SalesOrderSalesOrderIdUpdateEstimatedDeliveryDatePost(salesOrderId: number, body?: UpdateEstimatedDeliveryDate, apiVersion?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return SalesOrderApiFp(configuration).apiV1SalesOrderSalesOrderIdUpdateEstimatedDeliveryDatePost(salesOrderId, body, apiVersion, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SalesOrderApi - object-oriented interface
 * @export
 * @class SalesOrderApi
 * @extends {BaseAPI}
 */
export class SalesOrderApi extends BaseAPI {
    /**
     * 
     * @param {string} [apiVersion] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesOrderApi
     */
    public async apiV1SalesOrderActiveGet(apiVersion?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<ActiveSalesOrderDTO>> {
        return SalesOrderApiFp(this.configuration).apiV1SalesOrderActiveGet(apiVersion, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} [apiVersion] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesOrderApi
     */
    public async apiV1SalesOrderCreateFirstOrderPost(apiVersion?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<SalesOrderDTO>> {
        return SalesOrderApiFp(this.configuration).apiV1SalesOrderCreateFirstOrderPost(apiVersion, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {CreateSalesOrder} [body] 
     * @param {string} [apiVersion] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesOrderApi
     */
    public async apiV1SalesOrderCreatePost(body?: CreateSalesOrder, apiVersion?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<SalesOrderDTO>> {
        return SalesOrderApiFp(this.configuration).apiV1SalesOrderCreatePost(body, apiVersion, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} [dqb] DynamicQuery
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesOrderApi
     */
    public async apiV1SalesOrderQueryGet(dqb?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<SalesOrderDetailsDTODQBResultDTO>> {
        return SalesOrderApiFp(this.configuration).apiV1SalesOrderQueryGet(dqb, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {number} salesOrderId 
     * @param {AddSalesOrderLineItem} [body] 
     * @param {string} [apiVersion] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesOrderApi
     */
    public async apiV1SalesOrderSalesOrderIdAddLineItemPost(salesOrderId: number, body?: AddSalesOrderLineItem, apiVersion?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<AddSalesOrderLineItemDTO>> {
        return SalesOrderApiFp(this.configuration).apiV1SalesOrderSalesOrderIdAddLineItemPost(salesOrderId, body, apiVersion, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {number} salesOrderId 
     * @param {string} [apiVersion] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesOrderApi
     */
    public async apiV1SalesOrderSalesOrderIdBuyAllPost(salesOrderId: number, apiVersion?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<AddOrUpdateFeedbackDTO>> {
        return SalesOrderApiFp(this.configuration).apiV1SalesOrderSalesOrderIdBuyAllPost(salesOrderId, apiVersion, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {number} salesOrderId 
     * @param {number} salesOrderLineItemId 
     * @param {AddOrUpdateFeedback} [body] 
     * @param {string} [apiVersion] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesOrderApi
     */
    public async apiV1SalesOrderSalesOrderIdFeedbackSalesOrderLineItemIdPost(salesOrderId: number, salesOrderLineItemId: number, body?: AddOrUpdateFeedback, apiVersion?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<AddOrUpdateFeedbackDTO>> {
        return SalesOrderApiFp(this.configuration).apiV1SalesOrderSalesOrderIdFeedbackSalesOrderLineItemIdPost(salesOrderId, salesOrderLineItemId, body, apiVersion, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {number} salesOrderId 
     * @param {string} [apiVersion] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesOrderApi
     */
    public async apiV1SalesOrderSalesOrderIdGet(salesOrderId: number, apiVersion?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<SalesOrderDetailsDTO>> {
        return SalesOrderApiFp(this.configuration).apiV1SalesOrderSalesOrderIdGet(salesOrderId, apiVersion, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {number} salesOrderId 
     * @param {ShipSalesOrder} [body] 
     * @param {string} [apiVersion] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesOrderApi
     */
    public async apiV1SalesOrderSalesOrderIdShipPost(salesOrderId: number, body?: ShipSalesOrder, apiVersion?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<ShipSalesOrderDTO>> {
        return SalesOrderApiFp(this.configuration).apiV1SalesOrderSalesOrderIdShipPost(salesOrderId, body, apiVersion, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {number} salesOrderId 
     * @param {UpdateAdditionalRequests} [body] 
     * @param {string} [apiVersion] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesOrderApi
     */
    public async apiV1SalesOrderSalesOrderIdUpdateAdditionalRequestsPost(salesOrderId: number, body?: UpdateAdditionalRequests, apiVersion?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return SalesOrderApiFp(this.configuration).apiV1SalesOrderSalesOrderIdUpdateAdditionalRequestsPost(salesOrderId, body, apiVersion, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {number} salesOrderId 
     * @param {UpdateSalesOrderAddress} [body] 
     * @param {string} [apiVersion] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesOrderApi
     */
    public async apiV1SalesOrderSalesOrderIdUpdateAddressPost(salesOrderId: number, body?: UpdateSalesOrderAddress, apiVersion?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return SalesOrderApiFp(this.configuration).apiV1SalesOrderSalesOrderIdUpdateAddressPost(salesOrderId, body, apiVersion, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {number} salesOrderId 
     * @param {UpdateEstimatedDeliveryDate} [body] 
     * @param {string} [apiVersion] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesOrderApi
     */
    public async apiV1SalesOrderSalesOrderIdUpdateEstimatedDeliveryDatePost(salesOrderId: number, body?: UpdateEstimatedDeliveryDate, apiVersion?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return SalesOrderApiFp(this.configuration).apiV1SalesOrderSalesOrderIdUpdateEstimatedDeliveryDatePost(salesOrderId, body, apiVersion, options).then((request) => request(this.axios, this.basePath));
    }
}
