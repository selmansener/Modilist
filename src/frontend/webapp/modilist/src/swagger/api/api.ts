/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * ModilistAPI
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as url from "url";
import * as isomorphicFetch from "isomorphic-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "/".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration = {};

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = isomorphicFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError" = "RequiredError";
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface CreateProductInputDTO
 */
export interface CreateProductInputDTO {
    /**
     * 
     * @type {string}
     * @memberof CreateProductInputDTO
     */
    sku: string;
    /**
     * 
     * @type {string}
     * @memberof CreateProductInputDTO
     */
    name: string;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum SeedServiceType {
    Product = <any>'Product'
}
/**
 * DevelopmentApi - fetch parameter creator
 * @export
 */
export const DevelopmentApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {SeedServiceType} [seedServiceType] 
         * @param {boolean} [recreateDb] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SeedPost(seedServiceType?: SeedServiceType, recreateDb?: boolean, options: any = {}): FetchArgs {
            const localVarPath = `/api/v1/Seed`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("Bearer", ["https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/Test.Read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (seedServiceType !== undefined) {
                localVarQueryParameter['seedServiceType'] = seedServiceType;
            }

            if (recreateDb !== undefined) {
                localVarQueryParameter['recreateDb'] = recreateDb;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DevelopmentApi - functional programming interface
 * @export
 */
export const DevelopmentApiFp = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {SeedServiceType} [seedServiceType] 
         * @param {boolean} [recreateDb] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SeedPost(seedServiceType?: SeedServiceType, recreateDb?: boolean, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DevelopmentApiFetchParamCreator(configuration).apiV1SeedPost(seedServiceType, recreateDb, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * DevelopmentApi - factory interface
 * @export
 */
export const DevelopmentApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {SeedServiceType} [seedServiceType] 
         * @param {boolean} [recreateDb] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SeedPost(seedServiceType?: SeedServiceType, recreateDb?: boolean, options?: any) {
            return DevelopmentApiFp(configuration).apiV1SeedPost(seedServiceType, recreateDb, options)(fetch, basePath);
        },
    };
};

/**
 * DevelopmentApi - object-oriented interface
 * @export
 * @class DevelopmentApi
 * @extends {BaseAPI}
 */
export class DevelopmentApi extends BaseAPI {
    /**
     * 
     * @param {SeedServiceType} [seedServiceType] 
     * @param {boolean} [recreateDb] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentApi
     */
    public apiV1SeedPost(seedServiceType?: SeedServiceType, recreateDb?: boolean, options?: any) {
        return DevelopmentApiFp(this.configuration).apiV1SeedPost(seedServiceType, recreateDb, options)(this.fetch, this.basePath);
    }

}
/**
 * TestApi - fetch parameter creator
 * @export
 */
export const TestApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [apiVersion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TestGet(apiVersion?: string, options: any = {}): FetchArgs {
            const localVarPath = `/api/v1/Test`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("Bearer", ["https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/Test.Read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (apiVersion !== undefined) {
                localVarQueryParameter['api-version'] = apiVersion;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateProductInputDTO} [body] 
         * @param {string} [apiVersion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TestPost(body?: CreateProductInputDTO, apiVersion?: string, options: any = {}): FetchArgs {
            const localVarPath = `/api/v1/Test`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("Bearer", ["https://modilistauth.onmicrosoft.com/70773d38-9a72-4f72-af81-17eb6737353c/Test.Read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (apiVersion !== undefined) {
                localVarQueryParameter['api-version'] = apiVersion;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CreateProductInputDTO" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TestApi - functional programming interface
 * @export
 */
export const TestApiFp = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [apiVersion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TestGet(apiVersion?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = TestApiFetchParamCreator(configuration).apiV1TestGet(apiVersion, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {CreateProductInputDTO} [body] 
         * @param {string} [apiVersion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TestPost(body?: CreateProductInputDTO, apiVersion?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = TestApiFetchParamCreator(configuration).apiV1TestPost(body, apiVersion, options);

            console.log("qwfqw");
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * TestApi - factory interface
 * @export
 */
export const TestApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {

    return {
        /**
         * 
         * @param {string} [apiVersion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TestGet(apiVersion?: string, options?: any) {
            return TestApiFp(configuration).apiV1TestGet(apiVersion, options)(fetch, basePath);
        },
        /**
         * 
         * @param {CreateProductInputDTO} [body] 
         * @param {string} [apiVersion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TestPost(body?: CreateProductInputDTO, apiVersion?: string, options?: any) {
            return TestApiFp(configuration).apiV1TestPost(body, apiVersion, options)(fetch, basePath);
        },
    };
};

/**
 * TestApi - object-oriented interface
 * @export
 * @class TestApi
 * @extends {BaseAPI}
 */
export class TestApi extends BaseAPI {
    /**
     * 
     * @param {string} [apiVersion] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestApi
     */
    public apiV1TestGet(apiVersion?: string, options?: any) {
        return TestApiFp(this.configuration).apiV1TestGet(apiVersion, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {CreateProductInputDTO} [body] 
     * @param {string} [apiVersion] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestApi
     */
    public apiV1TestPost(body?: CreateProductInputDTO, apiVersion?: string, options?: any) {
        return TestApiFp(this.configuration).apiV1TestPost(body, apiVersion, options)(this.fetch, this.basePath);
    }

}
